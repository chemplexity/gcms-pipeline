% -----------------------------------------------
% GC/MS Pipeline (v0.9.1.20240917)
% https://github.com/chemplexity/gcms-pipeline
% -----------------------------------------------

%% Load initial library (if there is one) into workspace and SQL
% (only do this once)
libraryFile = './examples/library/GCMS DB-Public-KovatsRI-VS3.msp';
library = ImportNIST('file', libraryFile);

library = CleanupLibrary(library, ...
'min_points', 5, ...
'min_mz', 40, ...
'max_mz', 700);

db = CreateDatabase();
libraryData = prepareDataLibrary(library.library);
UpdateDatabaseLibrary(db, libraryData, true);

%% Extract and match peaks from given sample 
% Paste path of GC/M
% S files to import
filePath = {};

% Import data files
data = ImportAgilent('file', filePath, 'depth', 3);

% Validate data (remove non-MS and invalid files)
data = validateData(data);

% Preprocess data
data = preprocessData(data, ...
    'startIndex', [], ...
    'endIndex', [], ...
    'applyTimeCrop', false, ...
    'applyCentroid', true, ...
    'applyBaseline', false, ...
    'timeStart', [], ...
    'timeEnd', [], ...
    'baselineSmoothness', 1E7, ...
    'baselineAsymmetry', 1E-4);

% Detect chromatographic peaks and save peak mass spectra
data = detectPeaksInData(data, ...
    'startIndex', [], ...
    'endIndex', [], ...
    'minMz', 40, ...
    'maxMz', 700, ...
    'maxError', 50, ...
    'minPeakHeight', 1E4, ...
    'minPeakWidth', 0.01, ...
    'minIonIntensity', 0.02, ...
    'minSignalToNoise', 2, ...
    'maxPeakOverlap', 0.5, ...
    'peakSensitivity', 250);

% Perform spectral matching on peaks (create new library from peak data)
[data, library] = performSpectralMatch(data, library,...
    'startIndex', [], ...
    'endIndex', [], ...
    'minMz', 40, ...
    'maxMz', 700, ...
    'minScore', 70, ...
    'minPoints', 5, ...
    'addUnknownPeaksToLibrary', false, ...
    'overrideExistingMatches', true, ...
    'requireRetentionTimeMatch', false, ...
    'retentionTimeTolerance', 0.1);

plotChromatogramWithLibraryMatches(data, 1);

% Convert peaks data to user-friendly data structure
peaksData = reformatPeaksData(data);

%% Save data to SQL database
if exist('db', 'var')
    updateDatabase(data, 'filename', db);
else
    updateDatabase(data);
end

%% Update 'library' in workspace to include newly added peaks
library = loadSQLLibrary(db);

%% Plot mass spectra of matches (manual increment)
if ~exist('idx', 'var')
    idx = 0;
end

idx = idx + 1;
if idx > length(data)
    idx = 1;
end

plotType = {'compound_name', 'compound_ontology'};
plotChromatogramWithLibraryMatches(data, idx, plotType{1});